pipeline {
    agent any

    environment {
        DO_ROLLBACK = false
    }

    stages {
        stage('Alege Mediu') {
            steps {
                script {
                    def envChoice = input(
                        message: 'Pe ce mediu vrei sƒÉ faci deploy?',
                        ok: 'ContinuƒÉ',
                        parameters: [
                            choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Alege mediul de deploy')
                        ]
                    )
                    env.ENVIRONMENT = envChoice
                    echo "Mediu ales: ${env.ENVIRONMENT}"
                }
            }
        }

        stage('Detalii Deploy') {
            steps {
                script {
                    def deployDetails = input(
                        message: 'Introduce detalii pentru deploy:',
                        ok: 'Trimite',
                        parameters: [
                            string(name: 'DOCKER_IMAGE', defaultValue: 'myapp', description: 'Numele imaginii Docker'),
                            string(name: 'VERSION', defaultValue: 'v1.0.0', description: 'Versiunea imaginii')
                        ]
                    )
                    env.DOCKER_IMAGE = deployDetails['DOCKER_IMAGE']
                    env.VERSION = deployDetails['VERSION']
                    echo "Imagine: ${env.DOCKER_IMAGE}, Versiune: ${env.VERSION}"
                }
            }
        }

        stage('Vrei sƒÉ rulezi teste?') {
            steps {
                script {
                    def testChoice = input(
                        message: 'Rulezi teste √Ænainte de deploy?',
                        ok: 'RƒÉspunde',
                        parameters: [
                            booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'RuleazƒÉ teste?')
                        ]
                    )
                    env.RUN_TESTS = testChoice
                }
            }
        }

        stage('RuleazƒÉ Teste') {
            when {
                expression { return env.RUN_TESTS == 'true' || env.RUN_TESTS == true }
            }
            steps {
                echo "üß™ RulƒÉm teste pentru imaginea ${env.DOCKER_IMAGE}:${env.VERSION}..."
                sh 'sleep 2'
                echo "‚úÖ Testele au trecut cu succes!"
            }
        }

        stage('Deploy') {
            steps {
                echo "üöÄ Deploy imagine ${env.DOCKER_IMAGE}:${env.VERSION} √Æn mediu ${env.ENVIRONMENT}..."
                sh 'sleep 2'
                echo "üéâ Deploy finalizat!"
            }
        }

        stage('Rollback?') {
            steps {
                script {
                    def rollback = input(
                        message: 'Vrei sƒÉ faci rollback?',
                        ok: 'Decizie',
                        parameters: [
                            booleanParam(name: 'DO_ROLLBACK', defaultValue: false, description: 'ExecutƒÉ rollback?')
                        ]
                    )
                    env.DO_ROLLBACK = rollback
                    echo "Decizie rollback: ${env.DO_ROLLBACK}"
                }
            }
        }

        stage('ExecutƒÉ Rollback') {
            when {
                expression { return env.DO_ROLLBACK == 'true' || env.DO_ROLLBACK == true }
            }
            steps {
                echo "üîÅ Rollback √Æn curs pentru ${env.DOCKER_IMAGE}:${env.VERSION}..."
                sh 'sleep 2'
                echo "‚Ü©Ô∏è Rollback complet!"
            }
        }
    }

    post {
        always {
            echo 'üèÅ Pipeline terminat.'
        }
    }
}
